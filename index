Math.random() * (max - min + 1) + min


r * 3.5           

0 => 2

1 => 5.5



result is between 2 and 4.5


rand is b 0 1

2 + 0 * 4.5 = 2
2 + 1 * 4.5 = 6.5

4.5 - 2 * 0 = 4.5
4.5 - 2 = 2.5


r * 2 = 0 : 2

r * (2 - 1 + 1) + 1 = [1 : 3]
r * (2-1) + 1 = [1 : 2]

r* (4-2) +2 = [2 : 4]

r * (4.5 - 2) + 2 = [2 : 4.5] median 4.5 - 2 = 2.5/2 1.25
3.25

r * (max - min) + min 
 is 
 
 x * (max - min) + min = x + min * (max - min);

 ?????????????????????????????????????????????


 ex :

 2:4.5




            let gameScene = new Phaser.Scene('Game');

            gameScene.init = function(){
                this.pSpeed = 3;


                this.eMaxSpeed = 4;
                this.eMinSpeed = 1;

                this.top = 80;
                this.bot = 280;
                

            };

            gameScene.preload = function(){
                this.load.image('background', 'assets/background.png');
                this.load.image('player', 'assets/player.png');
                this.load.image('enemy', 'assets/dragon.png');
                this.load.image('goal', 'assets/treasure.png');

            };

            gameScene.create = function(){
                this.bg = this.add.sprite(0,0, 'background');
                this.bg.setOrigin(0,0);
                this.bg.setPosition(0,0);

                this.player = this.add.sprite(40, this.sys.game.config.height/2, 'player');
                this.player.setScale(.5);

                this.enemy1 = this.add.sprite(260, this.sys.game.config.height/2, 'enemy');
                this.enemy1.flipX = true;
                this.enemy1.setScale(.7);

                this.direction = Math.random() < 0.5 ? 1 : -1;
                let speed = Math.random() * (this.eMaxSpeed - this.eMinSpeed) + this.eMinSpeed;
                this.enemy1.speed = this.direction * speed;

                

                this.goal = this.add.sprite(this.sys.game.config.width - 80, this.sys.game.config.height/2, 'goal');

                this.goal.setScale(.6);

            };

            gameScene.update = function(){
                
                

                this.enemy1.y += this.enemy1.speed;

                let conditionUp = this.enemy1.speed > 0 && this.enemy1.y >= this.bot;
                let conditionDown = this.enemy1.speed < 0 && this.enemy1.y <= this.top;

                if(conditionUp || conditionDown){
                    this.enemy1.speed *= -1;
                }
                
                


                if(this.input.activePointer.isDown){
                    this.player.x += 3;
                }

                let pRect = this.player.getBounds();
                let tRect = this.goal.getBounds();
                let eRect = this.enemy1.getBounds();

                if(Phaser.Geom.Intersects.RectangleToRectangle(pRect,tRect)){
                    console.log("won");
                    this.scene.restart();
                    return ;
                }

                if(Phaser.Geom.Intersects.RectangleToRectangle(pRect, eRect)){
                    console.log("lost");
                    this.scene.restart();
                    return ;
                }

            };






            let config = {
                type : Phaser.AUTO,
                width : 640,
                height : 360,
                scene : gameScene
            } ;

            let game = new Phaser.Game(config);
 
